/**
 * @jest-environment jsdom
 */
import {fireEvent, screen, waitFor} from "@testing-library/dom"
import BillsUI from "../views/BillsUI.js"
import { ROUTES_PATH } from "../constants/routes.js"
import { localStorageMock } from "../__mocks__/localStorage.js"
import mockStore from "../__mocks__/store.js"
import { bills } from "../fixtures/bills.js"
import router from "../app/Router.js"
import '@testing-library/jest-dom'; // New
import Bills from "../containers/Bills.js";  // New
import { formatDate, formatStatus } from "../app/format.js";  // New

jest.mock("../app/store", () => mockStore)

// Mocks global settings
const mockNavigate = jest.fn(); // New
const mockStoreLocal = { // New
  bills: jest.fn(() => ({ // New
    list: jest.fn(() => // New
      Promise.resolve([ // New
        { date: "2023-11-01", status: "pending" },  // New
        { date: "2023-10-20", status: "accepted" }, // New
      ])  // New
    ),  // New
  })),  // New
};  // New

describe("Given I am connected as an employee", () => {
  describe("When I am on Bills Page", () => {
    test("Then bill icon in vertical layout should be highlighted", async () => {
      Object.defineProperty(window, 'localStorage', { value: localStorageMock })
      window.localStorage.setItem('user', JSON.stringify({ type: 'Employee' }))
      const root = document.createElement("div")
      root.setAttribute("id", "root")
      document.body.append(root)
      router()
      window.onNavigate(ROUTES_PATH.Bills)
      await waitFor(() => screen.getByTestId('icon-window'))
      const windowIcon = screen.getByTestId('icon-window')
      expect(windowIcon.classList).toContain('active-icon') // New
    })

    test("Then bills should be ordered from earliest to latest", () => {
      document.body.innerHTML = BillsUI({ data: bills })
      const dates = screen.getAllByText(/^(19|20)\d\d[- /.](0[1-9]|1[012])[- /.](0[1-9]|[12][0-9]|3[01])$/i).map(a => a.innerHTML)
      const antiChrono = (a, b) => ((a < b) ? 1 : -1)
      const datesSorted = [...dates].sort(antiChrono)
      expect(dates).toEqual(datesSorted)
    })
  })

  // new tests
  describe("When I interact with the Bills Class methods", () => {
    let billsInstance;

    beforeEach(() => {
      billsInstance = new Bills({
        document,
        onNavigate: mockNavigate,
        store: mockStoreLocal,
        localStorage: window.localStorage,
      });
    });

    // Test pour handleClickNewBill
    test("Then handleClickNewBill should navigate to NewBill", () => {
      billsInstance.handleClickNewBill();
      expect(mockNavigate).toHaveBeenCalledWith(ROUTES_PATH['NewBill']);
    });

    // Test pour handleClickIconEye
    test("Then handleClickIconEye should open modal and display the image", () => {
      const icon = document.createElement("div");
      icon.setAttribute("data-bill-url", "http://example.com/image.jpg");

      // Créez des fonctions mock pour les appels jQuery utilisés dans la méthode
      const mockModal = jest.fn();
      const mockHtml = jest.fn();
      const mockFind = jest.fn(() => ({ html: mockHtml }));

      // Mock de jQuery avec les fonctions appropriées
      jest.spyOn(global, '$').mockImplementation(() => ({
        width: () => 500,
        find: mockFind,
        modal: mockModal
      }));

      // Appelez la fonction
      billsInstance.handleClickIconEye(icon);

      // Vérifiez que la modale est affichée et que le HTML contient l'image avec l'URL correcte
      expect(mockModal).toHaveBeenCalledWith('show');
      expect(mockHtml).toHaveBeenCalledWith(expect.stringContaining('http://example.com/image.jpg'));

      // Nettoyage
      $.mockRestore();
    });

    // Test pour getBills
    test("Then getBills should return formatted bills", async () => {
      const result = await billsInstance.getBills();
      
      expect(result).toEqual([
        { date: formatDate("2023-11-01"), status: formatStatus("pending") },
        { date: formatDate("2023-10-20"), status: formatStatus("accepted") },
      ]);
    });
  });

  // Tests d'intégration
  describe("Integration Tests", () => {
    beforeEach(() => {
      // Simulation de la page de factures
      document.body.innerHTML = BillsUI({ data: bills });
      window.localStorage.setItem("user", JSON.stringify({ type: "Employee" }));
    });

    test("Then clicking on New Bill button should call handleClickNewBill and navigate to NewBill page", () => {
      const billsInstance = new Bills({
        document,
        onNavigate: mockNavigate,
        store: mockStoreLocal,
        localStorage: window.localStorage,
      });
      const newBillButton = screen.getByTestId("btn-new-bill");

      fireEvent.click(newBillButton);

      expect(mockNavigate).toHaveBeenCalledWith(ROUTES_PATH['NewBill']);
    });

    test("Then clicking on icon-eye should open a modal displaying the bill image", async () => {
      const icon = document.createElement("div");
      icon.setAttribute("data-testid", "icon-eye");
      icon.setAttribute("data-bill-url", "http://example.com/image.jpg");
      document.body.append(icon);

      // Mocks pour jQuery
      const mockModal = jest.fn(); // Pour simuler $('#modaleFile').modal('show')
      const mockHtml = jest.fn(); // Pour simuler $('#modaleFile').find(".modal-body").html()
      const mockClick = jest.fn();  // Pour simuler le clic event
      const mockFind = jest.fn(() => ({ html: mockHtml }));

      // Mock de $ pour retourner les méthodes simulées
      jest.spyOn(global, '$').mockImplementation(() => ({
        width: () => 500, // Simule une largeur de 500px
        find: mockFind,
        modal: mockModal,
        click: mockClick,
      }));

      // Instancie la classe Bills avec le mock de la méthode handleClickIconEye
      const billsInstance = new Bills({
        document,
        onNavigate: mockNavigate,
        store: mockStoreLocal,
        localStorage: window.localStorage,
      });

      // Simule le clic sur l'icône de l'œil
      fireEvent.click(icon);

      // Vérifications
      expect(mockModal).toHaveBeenCalledWith("show"); // Vérifie que la modale s'affiche
      expect(mockHtml).toHaveBeenCalledWith(expect.stringContaining("http://example.com/image.jpg")); // Vérifie que l'URL de l'image est bien passée dans la modale

      // Restaure les mocks après le test
      $.mockRestore();
    });
  });
});

// test d'intégration GET
describe("Given I am a user connected as Employee", () => {
  describe("When I navigate to the Bills Page", () => {
    // Test de récupération des factures via l'API mockée
    test("fetches bills from mock API GET", async () => {
      // Préparation de l'environnement
      localStorage.setItem("user", JSON.stringify({ type: "Employee"}));
      const root = document.createElement("div")
      root.setAttribute("id", "root")
      document.body.append(root)
      // Navigation vers la page Bills
      router()
      window.onNavigate(ROUTES_PATH.Bills)
      // Attente et validation des éléments
      await waitFor(() => screen.getByText("Mes notes de frais"))
      const contentType  = await screen.getByText("Type")
      expect(contentType).toBeTruthy()
    })
    // Tests des erreurs API
    describe("When an error occurs on API", () => {
      // partage de la même configuration de base (utilisateur simulé, DOM préparé, routage initialisé)
      beforeEach(() => {
        // surveille la méthode bills de mockStore afin de pouvoir l'observer ou modifier son comportement dans les tests
        jest.spyOn(mockStore, "bills")
        // Mock de localStorage pour tester les interactions avec localStorage dans un environnement contrôlé
        Object.defineProperty(
            window,
            'localStorage',
            { value: localStorageMock }
        )
        // Ajout d'un utilisateur simulé dans le localStorage, avec le type "Employee" pour tester les fonctionnalités spécifiques à un utilisateur connecté
        window.localStorage.setItem('user', JSON.stringify({
          type: 'Employee'
        }))
        // Ajout d'une <div> pour tester le routage et l'affichage de contenu
        const root = document.createElement("div")
        root.setAttribute("id", "root")
        document.body.appendChild(root)
        // Initialise le routeur de l'application pour écouter les changements d'URL et charger les pages correspondantes
        router()
      })
      // Test : Erreur 404
      test("fetches bills from an API and fails with 404 message error", async () => {
        // Mock de l'API pour retourner une erreur 404
        mockStore.bills.mockImplementationOnce(() => {
          return {
            list : () =>  {
              return Promise.reject(new Error("Erreur 404"))
            }
          }})
        // Lors de la navigation vers la page Bills, un message contenant "Erreur 404" doit s'afficher
        window.onNavigate(ROUTES_PATH.Bills)
        await new Promise(process.nextTick);
        const message = await screen.getByText(/Erreur 404/)
        expect(message).toBeTruthy()
      })
      // Test : Erreur 500
      test("fetches messages from an API and fails with 500 message error", async () => {
        // Mock de l'API pour retourner une erreur 500
        mockStore.bills.mockImplementationOnce(() => {
          return {
            list : () =>  {
              return Promise.reject(new Error("Erreur 500"))
            }
          }})
        // Lors de la navigation vers la page Bills, un message contenant "Erreur 500" doit s'afficher
        window.onNavigate(ROUTES_PATH.Bills)
        await new Promise(process.nextTick);
        const message = await screen.getByText(/Erreur 500/)
        expect(message).toBeTruthy()
      })
    })
  })
})

// scénario
// describe("Given I am connected as an employee", () => {
//   describe("When I am on Bills Page", () => {
    // let onNavigate;
    // let document;
    // let billsInstance;

    // beforeEach(() => {
    //   document = {
    //     querySelector: jest.fn().mockReturnValue({
    //       addEventListener: jest.fn(),
    //       click: jest.fn(),
    //     }),
    //     querySelectorAll: jest.fn().mockReturnValue([]),
    //   };
    //   onNavigate = jest.fn();
    //   billsInstance = new Bills({
    //     document,
    //     onNavigate,
    //     store: storeMock,
    //     localStorage: localStorageMock,
    //   });
    // });
    // Scénario 5
    // Given Je suis connecté en tant qu’employé, je suis sur la page Bills
    // When Je clique sur le bouton arrière de la navigation
    // Then Je reste connecté sur la page Bills
    // test("When I click the back button, then I stay logged on to the Bills page", () => {
      // const historyBackMock = jest.spyOn(window.history, 'back');
      // historyBackMock.mockImplementation(() => {
      //   // Simuler le fait de rester sur la page Bills
      //   onNavigate(ROUTES_PATH['Bills']);
      // });
      // historyBackMock();
      // expect(onNavigate).toHaveBeenCalledWith(ROUTES_PATH['Bills']);
    // });
    // Scénario 6
    // Given Je suis connecté en tant qu’employé, je suis sur la page Bills
    // When Je clique sur le bouton action pour voir une note de frais
    // Then Une modale s’ouvre et affiche le pdf
//     test('When I click the action button in front of a "note de frais", then a modal opens and display the pdf', () => {
      
//     });
//   });
// });

