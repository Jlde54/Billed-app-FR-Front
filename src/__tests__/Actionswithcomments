/**
 * @jest-environment jsdom
 */

import { screen } from "@testing-library/dom" // Importe la fonction 'screen' pour interagir avec le DOM dans les tests
import Actions from "../views/Actions.js" // Importe le composant HTML à tester
import '@testing-library/jest-dom/extend-expect'  // Étend Jest avec des assertions utiles pour le DOM


describe('Given I am connected as an Employee', () => {   // Ce bloc décrit les tests pour un employé connecté
  // Test 1 : Vérifier que l'icône est affichée
  describe('When I am on Bills page and there are bills', () => { // On décrit le contexte "Quand je suis sur la page des factures et qu'il y a des factures"
    test(('Then, it should render icon eye'), () => { // On décrit le test "Alors ça devrait montrer l'icône "oeil""
      const html = Actions()  // Actions() est appelé pour générer le HTML, et ce HTML est ajouté au document.body.
      document.body.innerHTML = html  // Insère le HTML généré dans le document
      expect(screen.getByTestId('icon-eye')).toBeTruthy() // Vérifie que l'élément avec data-testid="icon-eye" existe
    })
  })
  // Test 2 : Vérifier que l'URL est sauvegardée dans l'attribut data-bill-url
  describe('When I am on Bills page and there are bills with url for file', () => { // On décrit le contexte "Quand je suis sur la page des factures avec une URL pour le fichier)"
    test(('Then, it should save given url in data-bill-url custom attribute'), () => {
      const url = '/fake_url' // Déclare une URL fictive
      const html = Actions(url) // Passe l'URL en paramètre pour générer le HTML avec l'URL de fichier
      document.body.innerHTML = html  // Insère le HTML généré dans le document
      expect(screen.getByTestId('icon-eye')).toHaveAttribute('data-bill-url', url)  // Vérifie que l'attribut data-bill-url contient bien l'URL passée
    })
  })
})
